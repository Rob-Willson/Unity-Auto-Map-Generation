using UnityEngine;  public class Positioning : MonoBehaviour {     // Snap something to the 32x32px grid     public static Vector3 SnapToSquare (Vector3 v)     {         v.x = Mathf.Round(v.x);         v.y = Mathf.Round(v.y);         v.z = Mathf.Round(v.z);         return v;     }      // This returns the bottom-left-most position in the chunk of a vector passed to it!     public static Vector2 ResolveVectorToChunk (Vector2 pos)     {         // Calculate remainder when dividing an exact map position by chunk size         float remainderX = pos.x % LevelGenerator.instance.chunkSize;         float remainderY = pos.y % LevelGenerator.instance.chunkSize;         // Use remainder to get player's chunk position         pos.x = (pos.x - remainderX);         pos.y = (pos.y - remainderY);         return pos;     }      //	Returns an array of Vector2s for the surrounding squares around a position, with variations on size based on the enum SpreadType passed to it     public static Vector2[] ActualSurroundingCoordinates (SpreadType spreadType, Vector3 pos)     {         Vector2[] coords = RelativeSurroundingCoordinates(spreadType);         for(int i = 0; i < coords.Length; i++)         {             coords[i].x += pos.x;             coords[i].y += pos.y;         }         return coords;     }      //	Returns an array of Vector2s relative to a central square, with variations on size based on the enum SpreadType passed to it     public static Vector2[] RelativeSurroundingCoordinates (SpreadType spreadType)     {         Vector2[] coords;         switch(spreadType)         {             case SpreadType.Adjacent:                 coords = new Vector2[4];                 coords[0] = new Vector2(0, 1);                 coords[1] = new Vector2(1, 0);                 coords[2] = new Vector2(0, -1);                 coords[3] = new Vector2(-1, 0);                 return coords;             case SpreadType.OneSqmRadius:                 coords = new Vector2[8];                 coords[0] = new Vector2(0, 1);                 coords[1] = new Vector2(1, 1);                 coords[2] = new Vector2(1, 0);                 coords[3] = new Vector2(1, -1);                 coords[4] = new Vector2(0, -1);                 coords[5] = new Vector2(-1, -1);                 coords[6] = new Vector2(-1, 0);                 coords[7] = new Vector2(-1, 1);                 return coords;             case SpreadType.TwoSqmRadius:                 coords = new Vector2[20];                 coords[0] = new Vector2(0, 1);                 coords[1] = new Vector2(1, 1);                 coords[2] = new Vector2(1, 0);                 coords[3] = new Vector2(1, -1);                 coords[4] = new Vector2(0, -1);                 coords[5] = new Vector2(-1, -1);                 coords[6] = new Vector2(-1, 0);                 coords[7] = new Vector2(-1, 1);                 coords[8] = new Vector2(-1, 2);                 coords[9] = new Vector2(0, 2);                 coords[10] = new Vector2(1, 2);                 coords[11] = new Vector2(2, 1);                 coords[12] = new Vector2(2, 0);                 coords[13] = new Vector2(2, -1);                 coords[14] = new Vector2(1, -2);                 coords[15] = new Vector2(0, -2);                 coords[16] = new Vector2(-1, -2);                 coords[17] = new Vector2(-2, -1);                 coords[18] = new Vector2(-2, 0);                 coords[19] = new Vector2(-2, 1);                 return coords;             case SpreadType.ThreeSqmRadius:                 coords = new Vector2[36];                 coords[0] = new Vector2(0, 1);                 coords[1] = new Vector2(1, 1);                 coords[2] = new Vector2(1, 0);                 coords[3] = new Vector2(1, -1);                 coords[4] = new Vector2(0, -1);                 coords[5] = new Vector2(-1, -1);                 coords[6] = new Vector2(-1, 0);                 coords[7] = new Vector2(-1, 1);                 coords[8] = new Vector2(-1, 2);                 coords[9] = new Vector2(0, 2);                 coords[10] = new Vector2(1, 2);                 coords[11] = new Vector2(2, 1);                 coords[12] = new Vector2(2, 0);                 coords[13] = new Vector2(2, -1);                 coords[14] = new Vector2(1, -2);                 coords[15] = new Vector2(0, -2);                 coords[16] = new Vector2(-1, -2);                 coords[17] = new Vector2(-2, -1);                 coords[18] = new Vector2(-2, 0);                 coords[19] = new Vector2(-2, 1);                 coords[20] = new Vector2(-1, 3);                 coords[21] = new Vector2(0, 3);                 coords[22] = new Vector2(1, 3);                 coords[23] = new Vector2(2, 2);                 coords[24] = new Vector2(3, 1);                 coords[25] = new Vector2(3, 0);                 coords[26] = new Vector2(3, -1);                 coords[27] = new Vector2(2, -2);                 coords[28] = new Vector2(1, -3);                 coords[29] = new Vector2(0, -3);                 coords[30] = new Vector2(-1, -3);                 coords[31] = new Vector2(-2, -2);                 coords[32] = new Vector2(-3, -1);                 coords[33] = new Vector2(-3, 0);                 coords[34] = new Vector2(-3, 1);                 coords[35] = new Vector2(-2, 2);                 return coords;             default:                 print("Default case called in switch. Bug?");                 return null;         }     } } 